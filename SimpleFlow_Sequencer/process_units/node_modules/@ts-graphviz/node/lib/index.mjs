import cp from 'child_process';
import { toDot } from 'ts-graphviz';
import { file } from 'tmp-promise';
import util from 'util';
import fs from 'fs';

/**
 * Run dot command and output result to the specified path.
 *
 * @deprecated
 * Please understand the disadvantages before using it because it uses a blocking API.
 * This API is not maintained and will be removed in the future.
 *
 * ```ts
 * import path from "path";
 * import { digraph, attribute } from "ts-graphviz";
 * import { renderDot } from "@ts-graphviz/node";
 *
 * const G = digraph("G", (g) => {
 *   const a = g.node("aa");
 *   const b = g.node("bb");
 *   const c = g.node("cc");
 *   g.edge([a, b, c], {
 *     [attribute.color]: "red",
 *   });
 *   g.subgraph("A", (A) => {
 *     const Aa = A.node("Aaa", {
 *       [attribute.color]: "pink",
 *     });
 *     const Ab = A.node("Abb", {
 *       [attribute.color]: "violet",
 *     });
 *     const Ac = A.node("Acc");
 *     A.edge([Aa.port({ compass: "c" }), Ab, Ac, "E"], {
 *       [attribute.color]: "red",
 *     });
 *   });
 * });
 *
 * renderDot(G, {
 *   format: "svg",
 *   output: path.resolve(__dirname, "./callback.svg"),
 * });
 * ```
 */
function renderDot(dot, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.format, format = _c === void 0 ? 'png' : _c, _d = _b.output, output = _d === void 0 ? undefined : _d, _e = _b.dotCommand, dotCommand = _e === void 0 ? 'dot' : _e;
    var input = typeof dot === 'string' ? dot : toDot(dot);
    var args = [dotCommand, "-T" + format];
    if (typeof output === 'string') {
        args.push('-o', output);
    }
    return cp.execFileSync(dotCommand, args, {
        stdio: 'pipe',
        input: input,
    });
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var close = util.promisify(fs.close);
var writeFile = util.promisify(fs.writeFile);
var execFile = util.promisify(cp.execFile);

/**
 * A low-level API for wrappers for dot commands provided by Graphviz.
 */
function executeDot(dot, _a) {
    var _b = _a === void 0 ? {} : _a, format = _b.format, output = _b.output, suppressWarnings = _b.suppressWarnings, _c = _b.dotCommand, cmd = _c === void 0 ? 'dot' : _c, _d = _b.childProcessOptions, childProcessOptions = _d === void 0 ? {} : _d;
    return __awaiter(this, void 0, void 0, function () {
        var _e, fd, path, cleanup, args, stdout;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0: return [4 /*yield*/, file()];
                case 1:
                    _e = _f.sent(), fd = _e.fd, path = _e.path, cleanup = _e.cleanup;
                    _f.label = 2;
                case 2:
                    _f.trys.push([2, , 6, 8]);
                    return [4 /*yield*/, writeFile(fd, dot)];
                case 3:
                    _f.sent();
                    return [4 /*yield*/, close(fd)];
                case 4:
                    _f.sent();
                    args = [];
                    if (suppressWarnings === true) {
                        args.push('-q');
                    }
                    if (typeof format === 'string') {
                        args.push("-T" + format);
                    }
                    if (typeof output === 'string') {
                        args.push('-o', output);
                    }
                    args.push(path);
                    return [4 /*yield*/, execFile(cmd, args, __assign(__assign({}, childProcessOptions), { shell: true, encoding: 'buffer' }))];
                case 5:
                    stdout = (_f.sent()).stdout;
                    return [2 /*return*/, stdout];
                case 6: return [4 /*yield*/, cleanup()];
                case 7:
                    _f.sent();
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    });
}

/**
 * Returns the Graphviz output result as a buffer.
 */
function exportToBuffer(dot, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var input;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    input = typeof dot === 'string' ? dot : toDot(dot);
                    return [4 /*yield*/, executeDot(input, options)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}

/**
 * Export the file by giving a dot.
 *
 * ```ts
 * import path from "path";
 * import { digraph, attribute } from "ts-graphviz";
 * import { exportToFile } from "@ts-graphviz/node";
 *
 * const G = digraph("G", (g) => {
 *   const a = g.node("aa");
 *   const b = g.node("bb");
 *   const c = g.node("cc");
 *   g.edge([a, b, c], {
 *     [attribute.color]: "red",
 *   });
 *   g.subgraph("A", (A) => {
 *     const Aa = A.node("Aaa", {
 *       [attribute.color]: "pink",
 *     });
 *     const Ab = A.node("Abb", {
 *       [attribute.color]: "violet",
 *     });
 *     const Ac = A.node("Acc");
 *     A.edge([Aa.port({ compass: "c" }), Ab, Ac, "E"], {
 *       [attribute.color]: "red",
 *     });
 *   });
 * });
 *
 * await exportToFile(G, {
 *  format: "svg",
 *  output: path.resolve(__dirname, "./callback.svg"),
 * });
 * ```
 */
function exportToFile(dot, options) {
    return __awaiter(this, void 0, void 0, function () {
        var input;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    input = typeof dot === 'string' ? dot : toDot(dot);
                    return [4 /*yield*/, executeDot(input, options)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}

export { executeDot, exportToBuffer, exportToFile, renderDot };
