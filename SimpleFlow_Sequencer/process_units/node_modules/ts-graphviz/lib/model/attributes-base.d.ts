import { DotObject } from './abstract';
import { AttributesObject, AttributesValue, IAttributesBase, IAttributes, AttributesEntities } from '../types';
/**
 * @hidden
 */
export declare abstract class AttributesBase<T extends string> extends DotObject implements IAttributesBase<T> {
    /** @hidden */
    protected attrs: Map<T, AttributesValue>;
    constructor(attributes?: AttributesObject<T>);
    get values(): ReadonlyArray<[T, AttributesValue]>;
    /** The size of the attribute. */
    get size(): number;
    /** The size of the attribute. */
    get(key: T): AttributesValue | undefined;
    /** Set a value to the attribute. */
    set(key: T, value: AttributesValue): void;
    delete(key: T): void;
    apply(attributes: AttributesObject<T> | AttributesEntities<T>): void;
    clear(): void;
}
/**
 * A set of attribute values for any object.
 *
 * @category Attributes
 */
export declare class Attributes<T extends string = string> extends AttributesBase<T> implements IAttributes<T> {
    /** Comments to include when outputting with toDot. */
    comment?: string;
}
