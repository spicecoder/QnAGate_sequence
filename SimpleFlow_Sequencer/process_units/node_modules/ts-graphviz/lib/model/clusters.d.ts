import { attribute } from '../attribute';
import { ClusterSubgraphAttributes, EdgeAttributes, EdgeTargetLike, ICluster, IClusterCommonAttributes, IEdge, INode, ISubgraph, NodeAttributes, EdgeTargetsLike } from '../types';
import { Attributes, AttributesBase } from './attributes-base';
/**
 * Base class for clusters.
 * @hidden
 */
export declare abstract class Cluster<T extends string> extends AttributesBase<T> implements ICluster<T> {
    /** Cluster ID */
    readonly id?: string;
    /** Comments to include when outputting with toDot. */
    comment?: string;
    /** Common attributes of objects in the cluster. */
    abstract readonly attributes: Readonly<IClusterCommonAttributes>;
    /**
     * Nodes in the cluster.
     * @hidden
     */
    get nodes(): ReadonlyArray<INode>;
    /**
     * Edges in the cluster.
     * @hidden
     */
    get edges(): ReadonlyArray<IEdge>;
    /**
     * Subgraphs in the cluster.
     * @hidden
     */
    get subgraphs(): ReadonlyArray<ISubgraph>;
    private readonly objects;
    /**
     * Add a Node to the cluster.
     */
    addNode(node: INode): void;
    /**
     * Add Edge to the cluster.
     */
    addEdge(edge: IEdge): void;
    /**
     * Add a Subgraph to the cluster.
     */
    addSubgraph(subgraph: ISubgraph): void;
    /**
     * Check if the Node exists in the cluster.
     */
    existNode(nodeId: string): boolean;
    /**
     * Check if the Edge exists in the cluster.
     */
    existEdge(edge: IEdge): boolean;
    /**
     * Check if the Subgraph exists in the cluster.
     */
    existSubgraph(subgraph: ISubgraph): boolean;
    /**
     * Create a Subgraph and add it to the cluster.
     */
    createSubgraph(id?: string, attributes?: ClusterSubgraphAttributes): ISubgraph;
    createSubgraph(attributes?: ClusterSubgraphAttributes): ISubgraph;
    /**
     * Remove Node from the cluster.
     */
    removeNode(node: INode | string): void;
    /**
     * Remove Edge from the cluster.
     */
    removeEdge(edge: IEdge): void;
    /**
     * Remove Subgraph from the cluster.
     */
    removeSubgraph(subgraph: ISubgraph): void;
    /**
     * Create a Node in the cluster.
     */
    createNode(id: string, attributes?: NodeAttributes): INode;
    /**
     * Get Subgraph in cluster by specifying id.
     *
     * If there is no Subgraph with the specified id in the cluster, return undefined.
     */
    getSubgraph(id: string): ISubgraph | undefined;
    /**
     * Get Node in cluster by specifying id.
     *
     * @description
     * If there is no Node with the specified id in the cluster, return undefined.
     */
    getNode(id: string): INode | undefined;
    /** Create Edge and add it to the cluster. */
    createEdge(targets: (EdgeTargetLike | EdgeTargetsLike)[], attributes?: EdgeAttributes): IEdge;
    /** @hidden */
    private toEdgeTarget;
    /** @hidden */
    private toEdgeTargets;
    /**
     * Declarative API for Subgraph.
     *
     * @description
     * If there is a Subgraph with the given ID, use it.
     * If not, create a Subgraph.
     *
     * @param id Subgraph ID.
     * @param callback Callback to operate Subgraph.
     */
    subgraph(id?: string, callback?: (subgraph: ISubgraph) => void): ISubgraph;
    subgraph(id?: string, attributes?: ClusterSubgraphAttributes, callback?: (subgraph: ISubgraph) => void): ISubgraph;
    subgraph(attributes?: ClusterSubgraphAttributes, callback?: (subgraph: ISubgraph) => void): ISubgraph;
    subgraph(callback?: (subgraph: ISubgraph) => void): ISubgraph;
    /**
     * Declarative API for Node.
     *
     * @description
     * If there is a Node with the given ID, use it.
     * If not, create a Node.
     *
     * @param id Node ID.
     * @param callback Callback to operate Node.
     */
    node(id: string, callback?: (node: INode) => void): INode;
    node(id: string, attributes?: NodeAttributes, callback?: (node: INode) => void): INode;
    /**
     * Declarative API for Edge.
     *
     * @param targets Edges.
     * @param callback Callback to operate Edge.
     */
    edge(targets: EdgeTargetLike[], callback?: (edge: IEdge) => void): IEdge;
    edge(targets: EdgeTargetLike[], attributes?: EdgeAttributes, callback?: (edge: IEdge) => void): IEdge;
}
/**
 * Subgraph object.
 * @category Primary
 */
export declare class Subgraph extends Cluster<attribute.Subgraph | attribute.ClusterSubgraph> implements ISubgraph {
    readonly id?: string;
    attributes: {
        graph: Attributes<attribute.ClusterSubgraph>;
        edge: Attributes<attribute.Edge>;
        node: Attributes<attribute.Node>;
    };
    constructor(id?: string, attributes?: ClusterSubgraphAttributes);
    constructor(attributes?: ClusterSubgraphAttributes);
    /** Determines whether the Subgraph is a SubgraphCluster. */
    isSubgraphCluster(): boolean;
}
