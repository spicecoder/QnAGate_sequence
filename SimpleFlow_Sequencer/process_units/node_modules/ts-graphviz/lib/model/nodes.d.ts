import { EdgeTargetLike, EdgeTarget, INode, IPort, IForwardRefNode, INodeWithPort, NodeAttributes, IAttributes } from '../types';
import { DotObject } from './abstract';
import { attribute } from '../attribute';
import { EdgeTargetsLike } from '../types';
/**
 * @category Primary
 * @hidden
 */
export declare class ForwardRefNode implements IForwardRefNode {
    readonly id: string;
    readonly port: Readonly<Partial<IPort>>;
    constructor(id: string, port: Readonly<Partial<IPort>>);
}
/**
 * An object that represents a Node where port and compass are specified.
 * @category Primary
 */
export declare class NodeWithPort implements INodeWithPort {
    readonly node: INode;
    readonly port: Partial<IPort>;
    constructor(node: INode, port: Partial<IPort>);
}
/**
 * Node object.
 * @category Primary
 */
export declare class Node extends DotObject implements INode {
    readonly id: string;
    /** Comments to include when outputting with toDot. */
    comment?: string;
    readonly attributes: IAttributes<attribute.Node>;
    constructor(id: string, attributes?: NodeAttributes);
    /** Returns NodeWithPort with port and compass specified. */
    port(port: string | Partial<IPort>): NodeWithPort;
}
/**
 * @hidden
 */
export declare function isEdgeTarget(node: unknown): node is EdgeTarget;
/**
 * @hidden
 */
export declare function isEdgeTargetLike(node: unknown): node is EdgeTargetLike;
/**
 * @hidden
 */
export declare function isEdgeTargetsLike(target: EdgeTargetLike | EdgeTargetsLike): target is EdgeTargetsLike;
