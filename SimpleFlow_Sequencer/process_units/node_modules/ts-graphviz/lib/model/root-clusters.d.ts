import { attribute } from '../attribute';
import { IRootCluster, RootClusterAttributes } from '../types';
import { Cluster } from './clusters';
import { Attributes } from './attributes-base';
/**
 * Base class for RootCluster.
 */
export declare abstract class RootCluster extends Cluster<attribute.RootCluster> implements IRootCluster {
    readonly id?: string;
    /**
     * Strict mode.
     *
     * @description
     * A graph may also be described as strict.
     * This forbids the creation of multi-edges, i.e., there can be at most one edge with a given tail node and head node in the directed case.
     * For undirected graphs, there can be at most one edge connected to the same two nodes.
     * Subsequent edge statements using the same two nodes will identify the edge with the previously defined one and apply any attributes given in the edge statement.
     */
    strict: boolean;
    attributes: {
        graph: Attributes<"K" | "URL" | "bgcolor" | "colorscheme" | "fontcolor" | "fontname" | "fontsize" | "gradientangle" | "href" | "id" | "label" | "labeljust" | "labelloc" | "lheight" | "lp" | "lwidth" | "margin" | "nojustify" | "sortv" | "style" | "target" | "rank" | "area" | "color" | "fillcolor" | "layer" | "pencolor" | "penwidth" | "peripheries" | "tooltip">;
        edge: Attributes<attribute.Edge>;
        node: Attributes<attribute.Node>;
    };
    constructor(id?: string, attributes?: RootClusterAttributes);
    constructor(id?: string, strict?: boolean, attributes?: RootClusterAttributes);
    constructor(strict?: boolean, attributes?: RootClusterAttributes);
    constructor(attributes?: RootClusterAttributes);
}
/**
 * Graph object.
 *
 * @description
 * An object representing an omnidirectional graph.
 * @category Primary
 */
export declare class Graph extends RootCluster {
}
/**
 * Digraph object.
 *
 * @description
 * The object representing a directional graph.
 * @category Primary
 */
export declare class Digraph extends RootCluster {
}
